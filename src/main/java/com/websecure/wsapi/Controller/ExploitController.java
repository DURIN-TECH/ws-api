package com.websecure.wsapi.Controller;

import com.websecure.wsapi.Document.Dapp;
import com.websecure.wsapi.Document.Exploit;
import com.websecure.wsapi.Error.ResourceNotFoundException;
import com.websecure.wsapi.Repository.DappRepository;
import com.websecure.wsapi.Repository.ExploitRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.config.ConfigDataResourceNotFoundException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RequestMapping("/exploits")
@RestController
public class ExploitController {
    @Autowired
    ExploitRepository exploitRepository;

    @Autowired
    DappRepository dappRepository;

    @GetMapping()
    public List<Exploit> getExploits(){
        return exploitRepository.findAll();
    }

    @GetMapping("/{name}")
    public Optional<Exploit> getExploits(@PathVariable String name){
        Optional<Dapp> dapp = dappRepository.findDappByName(name);
        return exploitRepository.findExploitBydapp(dapp.get());
    }

    @PostMapping("/{name}")
    private String addExploit(@PathVariable String name, @RequestBody Exploit exploit){
        Optional<Dapp> dapp = dappRepository.findDappByName(name.toLowerCase());
        exploit.setDapp(dapp.get());
        exploitRepository.save(exploit);
        return "Exploit added";
    }
    
     @DeleteMapping("/{id}")
    private String deleteExploit (@PathVariable("id") String id) {
        exploitRepository.deleteById(id);
        return "Exploit with "+id+" deleted sucessfully";

    @PutMapping("{id}")
    public ResponseEntity<Exploit> updateExploit(@PathVariable String id, @RequestBody Exploit exploit){
        Exploit savedExploit = exploitRepository.findById(id).
                                orElseThrow(() -> new ResourceNotFoundException("No exploit with the id: " + id + " found"));

        savedExploit.setDapp(exploit.getDapp());
        savedExploit.setDate(exploit.getDate());
        savedExploit.setAudited(exploit.getAudited());
        savedExploit.setAmountLost(exploit.getAmountLost());

        return new ResponseEntity<>(exploitRepository.save(savedExploit), HttpStatus.NO_CONTENT);
    }
}
