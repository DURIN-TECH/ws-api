package com.websecure.wsapi.Controller;

import com.websecure.wsapi.Document.Dapp;
import com.websecure.wsapi.Document.Exploit;
import com.websecure.wsapi.Error.ResourceNotFoundException;
import com.websecure.wsapi.Repository.DappRepository;
import com.websecure.wsapi.Repository.ExploitRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@RequestMapping("/api/exploits")
@RestController
public class ExploitController {
    @Autowired
    ExploitRepository exploitRepository;

    @Autowired
    DappRepository dappRepository;

    @GetMapping()
    public ResponseEntity<Object> getExploits(){
        return new ResponseEntity<>(exploitRepository.findAll(), HttpStatus.OK);
    }

    @GetMapping("/{name}")
    public ResponseEntity<Object> getExploits(@PathVariable String name){
        Optional<Dapp> dapp = dappRepository.findDappByNameIgnoreCase(name);
        List<Exploit> exploits = exploitRepository.findExploitsBydapp(dapp.get());
        return new ResponseEntity<>(exploits, HttpStatus.OK);

    }

    @PostMapping("/{name}")
    private ResponseEntity<Exploit> addExploit(@PathVariable String name, @RequestBody Exploit exploit){
        Dapp dapp = dappRepository.findDappByNameIgnoreCase(name).
                orElseThrow(() -> new ResourceNotFoundException("Can't find dapp " + name));
        exploit.setDapp(dapp);
        exploitRepository.save(exploit);
        return new ResponseEntity<>(exploit, HttpStatus.CREATED);
    }
    
     @DeleteMapping("/{id}")
    public ResponseEntity<Map<String, Object>> deleteExploit (@PathVariable("id") String id) {
         Exploit exploit = exploitRepository.findById(id)
                 .orElseThrow(() -> new ResourceNotFoundException("No exist with id :" + id));
         exploitRepository.delete(exploit);
         Map<String, Object> response = new HashMap<>();
         response.put("deleted", Boolean.TRUE);
         response.put("exploit", exploit);
         return ResponseEntity.ok(response);
    }

    @PutMapping()
    public ResponseEntity<Exploit> updateExploit(@RequestBody Exploit exploit){
        Exploit savedExploit = exploitRepository.findById(exploit.getId()).
                                orElseThrow(()
                                        -> new ResourceNotFoundException("No exploit with the id: "
                                        + exploit.getId() + " found"));

        savedExploit.setDapp(exploit.getDapp());
        savedExploit.setDate(exploit.getDate());
        savedExploit.setAudited(exploit.getAudited());
        savedExploit.setAmountLost(exploit.getAmountLost());

        return new ResponseEntity<>(exploitRepository.save(savedExploit), HttpStatus.NO_CONTENT);
    }
}
